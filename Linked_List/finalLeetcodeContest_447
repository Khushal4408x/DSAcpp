
//Slightly wrong since it checks immediate neighbours
#include <iostream>
#include <vector>
#include <set>
using namespace std;

class Solution {
public:
    int countCoveredBuildings(int n, vector<vector<int>>& buildings) {
        set<pair<int, int>> buildingSet;
        
        // Insert all buildings
        for (auto& b : buildings) {
            buildingSet.insert({b[0], b[1]});
        }

        int count = 0;

        // Check each building
        for (auto& b : buildings) {
            int x = b[0];
            int y = b[1];
            bool up=false;
            bool down=false;
            bool left=false;
            bool right =false;
            for(int j=x-1;j>=1;j--){
                if(buildingSet.count({j, y})){
                    up=true;
                    break;
                }
            }
            for(int j=x+1;j<=n;j++){
                if(buildingSet.count({j, y})){
                    down=true;
                    break;
                }
            }
            for(int i=y+1;i<=n;i++){
                if(buildingSet.count({x, i})){
                    right=true;
                    break;
                }
            }
            for(int i=y-1;i>=1;i--){
                if(buildingSet.count({x, i})){
                    left=true;
                    break;
                }
            }
           
            if (up && down && left && right) {
                count++;
            }
        }

        return count;
    }
};

int main() {
    Solution sol;
    int n = 5;
    vector<vector<int>> buildings = {{1,3},{3,2},{3,3},{3,5},{5,3}};

    cout << sol.countCoveredBuildings(n, buildings) << endl;  // Should print 0
    return 0;
}
